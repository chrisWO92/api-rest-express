Primero que todo se ejecuta el comando npm init -y y el comando git init.
También se crean los archivos .gitignore, .editorconfig y .eslintrc.json, 
que son usados para definir parámetros del entorno de desarrollo.

Luego se deben definir los contenidos de estos archivos, que serán objetos
entre llaves {} con una serie de pares llave-valor que definen parámetros para
nuestro entorno de desarrollo.

En el package.json definimos unos comandos para correr nodemon cuando usamos el
comando "npm run dev", y debemos también instalar nodemon y otras configuraciones 
eslint de prettier que nos permitirán trabajar mejor.

Estas caracterísitcas las tenemos con el siguiente comando:

npm i nodemon eslint eslint-config-prettier eslint-plugin-prettier pritter -D

REST: Representational State Transfer

GET: obtener info
PUT: Modificaciones
PATCH: Actualización de productos particulares
POST: Creación
DELETE: Eliminación


GET
Los endpoints tipo GET deberían apuntar a rutas del tipo /products/{id}, es decir, 
que antes de apuntar al producto específico, debemos pasar por el conjunto de
productos cuyo nombre debe estar en plural.

SINGLE RESPONSABILITY PRINCIPLE
Cada trozo de código debería tener una sóla función o responsabilidad.

BOOM
Se instala como npm i @hapi/boom
Sirve para manejar los tipos de errores.

JOI
Siempre que le vamos a enviar datos al servidor a través de requests debemos asegurarnos
de que el formato de estos datos es el correcto. Para eso se usa JOI, para validar si los
datos que enviamos al servidor tienen las características que deben tener.
npm i joi



